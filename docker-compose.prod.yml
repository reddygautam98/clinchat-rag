# Production Deployment Configuration
# ClinChat-RAG Clinical AI Assistant - Production Ready

version: '3.8'

services:
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: clinchat_prod
      POSTGRES_USER: clinchat_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - clinchat_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clinchat_user -d clinchat_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - clinchat_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: production
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://clinchat_user:${POSTGRES_PASSWORD}@postgres:5432/clinchat_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Security Configuration
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # AI Configuration
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      
      # HIPAA Configuration
      AUDIT_LOG_LEVEL: INFO
      PHI_ENCRYPTION_ENABLED: "true"
      COMPLIANCE_MODE: "strict"
      
      # Production Settings
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: INFO
      CORS_ORIGINS: ${CORS_ORIGINS}
      
      # Monitoring
      PROMETHEUS_ENABLED: "true"
      METRICS_PORT: 9090
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    networks:
      - clinchat_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # React Frontend (PWA)
  frontend:
    build:
      context: ./ui/mobile
      dockerfile: Dockerfile.prod
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_ENVIRONMENT: production
      REACT_APP_VERSION: ${APP_VERSION}
    ports:
      - "3000:80"
    networks:
      - clinchat_network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer & SSL Termination
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - clinchat_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - clinchat_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - clinchat_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log Aggregation (ELK Stack)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xmx512m -Xms512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - clinchat_network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logs:/var/log/clinchat
    ports:
      - "5044:5044"
    networks:
      - clinchat_network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - clinchat_network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Backup Service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: clinchat_prod
      POSTGRES_USER: clinchat_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      S3_BUCKET: ${BACKUP_S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./backups:/backups
    networks:
      - clinchat_network
    depends_on:
      - postgres
    restart: unless-stopped

  # Health Monitor
  health_monitor:
    build:
      context: ./monitoring/health
      dockerfile: Dockerfile
    environment:
      SERVICES_TO_MONITOR: "backend:8000,frontend:80,postgres:5432,redis:6379"
      ALERT_EMAIL: ${ALERT_EMAIL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    networks:
      - clinchat_network
    depends_on:
      - backend
      - frontend
      - postgres
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  clinchat_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16